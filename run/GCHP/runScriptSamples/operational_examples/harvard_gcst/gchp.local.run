#!/bin/bash

# Set nCores here to specify number of cores to use in the run. 6 is the minimum
# allowable number of cores. File runConfig.sh will need to be updated so that
# variables NY and NUM_CORES_PER_NODE match nCores set below.
nCores=6

# Exit with error if nCores does not match number of cores configured in
# runConfig.sh
cfgCores=$( grep -oP 'TOTAL_CORES=\s*\K\d+' runConfig.sh )
if [[ ${nCores} != ${cfgCores} ]]; then
   echo "ERROR: number of cores set in gchp.local.run does not match TOTAL_CORES set in runConfig.sh."
   exit 1
fi

# Define log
log=gchp.log

# Remove cap_restart if not doing a multi-segmented run. Keeping it around
# from a previous run will make new run start at the end time of the last run.
if [[ -e cap_restart ]]; then
   rm cap_restart
fi

# Sync all config files with settings in runConfig.sh
source runConfig.sh 2>&1 | tee ${log}

# Only start run if no error
if [[ $? == 0 ]]; then

    # Source your environment file. This requires first setting the gchp.env
    # symbolic link using script setEnvironment in the run directory. 
    # Be sure gchp.env points to the same file for both compilation and run.
    gchp_env=$(readlink -f gchp.env)
    if [ ! -f ${gchp_env} ] 
    then
       echo "ERROR: gchp.env symbolic link is not set!"
       echo "Set symbolic link to env file using setEnvironment.sh."
       echo "Exiting."
       exit 1
    fi
    echo " " >> ${log}
    echo "WARNING: You are using environment settings in ${gchp_env}" 2>&1 | tee -a ${log}
    source ${gchp_env} >> ${log}

    # Echo start date (overwrite last log)
    echo ' ' 2>&1 | tee -a ${log}
    echo '===> Run started at' `date` 2>&1 | tee -a ${log}

    # Start the simulation. Use 6 cores.
    time mpirun -np ${nCores} ./gchp 2>&1 | tee -a ${log}

    # Rename the restart (checkpoint) file for clarity to include datetime
    if [ -f cap_restart ]; then
       restart_datetime=$(echo $(cat cap_restart) | sed 's/ /_/g')
       mv gcchem_internal_checkpoint gcchem_internal_checkpoint.restart.${restart_datetime}.nc4
    fi

    # Echo end date
    echo '===> Run ended at' `date` 2>&1 | tee -a ${log}

fi

# Clear variable
unset log

# Exit normally
exit 0

